function getSampleNumber(count) {
    for (let i = 0; i < count; i++) {
        const map = new Set();
        while (map.size < 6) {
            map.add(Math.floor((Math.random() * 10000) % 45) + 1);
        }
        const arrayFromSet = Array.from(map);
        arrayFromSet.sort((a, b) => a - b);
        // console.log(arrayFromSet);
        return arrayFromSet;
    }
}
function getTryCount(expectedSeries) {
    let count = 0;
    while (true) {
        count++;
        const map = new Set();
        while (map.size < 6) {
            map.add(Math.floor((Math.random() * 10000) % 45) + 1);
        }
        const arrayFromSet = Array.from(map);
        arrayFromSet.sort((a, b) => a - b);

        const arraysEqual = (arr1, arr2) => {
            if (arr1.length !== arr2.length) return false;
            for (let i = 0; i < arr1.length; i++) {
                if (arr1[i] !== arr2[i]) return false;
            }
            return true;
        };

        if (arraysEqual(arrayFromSet, expectedSeries)) {
            // console.log(count);
            // console.log(arrayFromSet);
            return count;
        }
    }
}
expectedSeries = [1, 5, 8, 16, 28, 33];

function main() {
    for (let i = 0; i < 25; i++) {
        let total = 0;
        let repeat = 7;
        for (let i = 0; i < repeat; i++) {
            total += getTryCount(expectedSeries);
        }
        console.log(total, getSampleNumber(total / 10));
    }
}

function test() {
    console.log(getSampleNumber(432612442));
}

test();

/* Tester
60906319 [ 1, 15, 22, 37, 40, 44 ]
42554413 [ 1, 6, 17, 30, 41, 44 ]
55973691 [ 2, 5, 7, 20, 27, 32 ]
62698128 [ 16, 17, 23, 25, 32, 35 ]
48272338 [ 3, 5, 28, 32, 35, 43 ]
53310045 [ 12, 16, 26, 36, 41, 44 ]
52465126 [ 4, 14, 25, 32, 44, 45 ]
65549645 [ 10, 21, 23, 26, 38, 43 ]
87537786 [ 2, 8, 30, 33, 40, 41 ]
74785823 [ 10, 15, 16, 17, 20, 23 ]
66405083 [ 4, 5, 34, 37, 42, 44 ]
34987197 [ 8, 16, 20, 28, 30, 34 ]
58420472 [ 10, 11, 15, 18, 34, 40 ]
56884729 [ 3, 6, 9, 19, 30, 43 ]
36407158 [ 4, 16, 26, 36, 41, 43 ]
26782131 [ 10, 17, 24, 34, 36, 38 ]
52041773 [ 2, 11, 14, 25, 33, 45 ]
58342780 [ 19, 22, 25, 32, 39, 42 ]
40730706 [ 14, 35, 36, 41, 43, 44 ]
61626846 [ 3, 7, 8, 36, 37, 43 ]
55665210 [ 3, 5, 10, 11, 13, 25 ]
72023971 [ 8, 11, 13, 35, 38, 40 ]
*/

/* 선택 번호
24/07/20 -> []

24/07/13 -> [ 1, 5, 8, 16, 28, 33 ]
[ 5, 14, 17, 29, 30, 39 ]
[ 3, 12, 16, 19, 29, 45 ]
[ 2, 5, 18, 30, 31, 40 ]
[ 1, 21, 24, 26, 33, 34 ]
[ 2, 9, 14, 22, 40, 43 ]
 
24/07/06 -> [ 10, 15, 24, 30, 31, 37 ]
[ 11, 12, 20, 27, 36, 41 ]
[ 5, 14, 17, 29, 30, 39 ]
[ 3, 18, 33, 34, 39, 44 ]
[ 2, 16, 24, 25, 29, 43 ]
[ 9, 17, 20, 25, 40, 44] 자동

24/06/29 -> [ 4, 5, 9, 11, 37, 40 ]
[ 2, 12, 17, 22, 36, 41 ]
[ 11, 22, 25, 27, 30, 41 ]
[ 10, 17, 21, 24, 29, 42 ]
[ 8, 28, 29, 37, 43, 44 ]
[ 11, 13, 18, 29, 34, 41 ]

24/06/22 -> [ 6, 14, 25, 33, 40, 44 ]
[ 2, 12, 17, 22, 36, 40 ]
[ 11, 22, 25, 27, 30, 41 ]
[ 10, 17, 21, 24, 29, 42 ]
[ 8, 28, 29, 37, 43, 44 ]
[ 11, 13, 18, 29, 34, 40 ]

24/6/15 -> [ 3, 8, 17, 30, 33, 34 ]
[ 8, 11, 17, 30, 33, 38 ] - 4등
[ 7, 20, 29, 35, 39, 41 ]
[ 2, 14, 23, 31, 42, 43 ]
[ 3, 7, 21, 23, 24, 32 ]
[ 5, 14, 16, 19, 30, 35 ]

24/06/8 [ 13, 19, 21, 24, 34, 35 ]
24/06/1 [ 3, 6, 21, 30, 34, 35 ]
24/05/25 [ 6, 24, 31, 32, 38, 44 ]
*/

/* History
[ 8, 11, 17, 30, 33, 38 ] -> 6/15 4등 
[ 6, 14, 24, 25, 41, 44 ] -> 6/22 4등
[ 14, 15, 25, 32, 34, 40 ] -> 6/22 5등

[ 7, 20, 29, 35, 39, 41 ]
[ 9, 19, 21, 22, 41, 44 ]
[ 7, 12, 23, 26, 32, 45 ]
[ 3, 16, 17, 18, 33, 43 ]
[ 14, 23, 35, 36, 39, 42 ]
[ 18, 21, 28, 33, 44, 45 ]
[ 11, 22, 25, 27, 30, 41 ]
[ 10, 14, 16, 22, 26, 45 ]
[ 9, 18, 23, 38, 41, 44 ]
[ 3, 7, 21, 23, 24, 32 ]
[ 2, 12, 17, 22, 36, 40 ]
[ 1, 3, 15, 24, 31, 42 ]
[ 10, 17, 21, 24, 29, 42 ]
[ 8, 28, 29, 37, 43, 44 ]
[ 11, 13, 18, 29, 34, 40 ]
*/
